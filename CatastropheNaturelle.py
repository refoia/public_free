import random

class CatastropheNaturelle:
    def __init__(self, nom, impact_environnemental, frequence, duree_recuperation=None):
        """
        - nom : Nom de la catastrophe.
        - impact_environnemental : Dictionnaire {√©l√©ment : impact (coefficient de r√©duction)}.
        - frequence : Probabilit√© d'occurrence.
        - duree_recuperation : Temps en cycles avant que certains √©l√©ments se r√©tablissent.
        """
        self.nom = nom
        self.impact_environnemental = impact_environnemental
        self.frequence = frequence
        self.duree_recuperation = duree_recuperation if duree_recuperation else {}

    def declencher(self, ecosysteme):
        print(f"\n‚ö†Ô∏è Catastrophe en cours : {self.nom} ‚ö†Ô∏è")
        for element, impact in self.impact_environnemental.items():
            if element in ecosysteme:
                ecosysteme[element] *= impact  # Applique un coefficient de r√©duction
                ecosysteme[element] = max(0, round(ecosysteme[element], 2))  # √âvite les valeurs n√©gatives
                print(f"üîª {element.capitalize()} r√©duit √† {ecosysteme[element]}")

        # Planifier la r√©cup√©ration si applicable
        for element, cycles in self.duree_recuperation.items():
            if element in ecosysteme:
                print(f"üîÑ {element.capitalize()} commencera √† se r√©tablir dans {cycles} cycles.")
                ecosysteme[f"recup_{element}"] = cycles  # Ajoute un compteur de r√©cup√©ration

class EruptionVolcanique(CatastropheNaturelle):
    def __init__(self):
        super().__init__(
            nom="√âruption Volcanique",
            impact_environnemental={"v√©g√©tation": 0.2, "faune": 0.5, "population": 0.7, "temp√©rature": 0.9},
            frequence=0.01,
            duree_recuperation={"temp√©rature": 5, "v√©g√©tation": 10}  # La temp√©rature et la v√©g√©tation r√©cup√®rent avec le temps
        )

class Seisme(CatastropheNaturelle):
    def __init__(self):
        super().__init__(
            nom="S√©isme",
            impact_environnemental={"population": 0.8, "faune": 0.9, "infrastructures": 0.5},
            frequence=0.02,
            duree_recuperation={"infrastructures": 15}  # Les infrastructures mettent du temps √† √™tre reconstruites
        )

class Tempete(CatastropheNaturelle):
    def __init__(self):
        super().__init__(
            nom="Temp√™te",
            impact_environnemental={"v√©g√©tation": 0.7, "faune": 0.85, "population": 0.95},
            frequence=0.05,
            duree_recuperation={"v√©g√©tation": 5}  # La v√©g√©tation r√©cup√®re rapidement
        )

class IncendieForet(CatastropheNaturelle):
    def __init__(self):
        super().__init__(
            nom="Incendie de For√™t",
            impact_environnemental={"v√©g√©tation": 0.3, "faune": 0.6},
            frequence=0.03,
            duree_recuperation={"v√©g√©tation": 8}  # La for√™t repousse lentement
        )

def declencher_evenements_aleatoires(ecosysteme):
    """
    V√©rifie si une catastrophe doit √™tre d√©clench√©e en fonction des probabilit√©s.
    """
    catastrophes = [EruptionVolcanique(), Seisme(), Tempete(), IncendieForet()]
    
    for catastrophe in catastrophes:
        if random.random() < catastrophe.frequence:
            catastrophe.declencher(ecosysteme)

def recuperation_ecosysteme(ecosysteme):
    """
    G√®re la r√©cup√©ration des √©l√©ments touch√©s apr√®s une catastrophe.
    """
    elements_a_recuperer = [key for key in ecosysteme if key.startswith("recup_")]
    
    for key in elements_a_recuperer:
        element = key.replace("recup_", "")
        if ecosysteme[key] > 0:
            ecosysteme[key] -= 1  # Diminue le temps de r√©cup√©ration
            if ecosysteme[key] == 0:
                print(f"‚úÖ {element.capitalize()} a retrouv√© son √©tat normal !")
                ecosysteme[element] = min(ecosysteme[element] * 1.5, 100)  # R√©cup√©ration progressive
                del ecosysteme[key]  # Supprime le compteur de r√©cup√©ration

def afficher_ecosysteme(ecosysteme):
    """
    Affiche l'√©tat actuel de l'√©cosyst√®me.
    """
    print("\nüìä √âtat actuel de l'√©cosyst√®me :")
    for key, value in ecosysteme.items():
        if not key.startswith("recup_"):  # Ne pas afficher les compteurs de r√©cup√©ration
            print(f"{key.capitalize()} : {value}")

# üåç Exemple de simulation
ecosysteme = {"v√©g√©tation": 100, "faune": 100, "population": 100, "temp√©rature": 20, "infrastructures": 100}

for cycle in range(1, 31):  # Simuler 30 jours
    print(f"\nüåø Jour {cycle} üåø")
    declencher_evenements_aleatoires(ecosysteme)
    recuperation_ecosysteme(ecosysteme)
    afficher_ecosysteme(ecosysteme)
    print("-" * 40)
